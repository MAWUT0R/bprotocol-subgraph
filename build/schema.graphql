type Exit @entity(immutable: true) {
  id: Bytes!
  val: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Flee @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Join @entity(immutable: true) {
  id: Bytes!
  val: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ParamsSet @entity(immutable: true) {
  id: Bytes!
  A: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RebalanceSwap @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  ethAmount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Tack @entity(immutable: true) {
  id: Bytes!
  src: Bytes! # address
  dst: Bytes! # address
  wad: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  _from: Bytes! # address
  _to: Bytes! # address
  _value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserDeposit @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  numShares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserWithdraw @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  ethAmount: BigInt! # uint256
  numShares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type PBAMMExit @entity(immutable: true) {
  id: Bytes!
  val: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMFlee @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMJoin @entity(immutable: true) {
  id: Bytes!
  val: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMParamsSet @entity(immutable: true) {
  id: Bytes!
  A: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMRebalanceSwap @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  ethAmount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMTack @entity(immutable: true) {
  id: Bytes!
  src: Bytes! # address
  dst: Bytes! # address
  wad: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMTransfer @entity(immutable: true) {
  id: Bytes!
  _from: Bytes! # address
  _to: Bytes! # address
  _value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMUserDeposit @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  numShares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PBAMMUserWithdraw @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  ethAmount: BigInt! # uint256
  numShares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ChickenSet @entity(immutable: true) {
  id: Bytes!
  chicken: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GemSellerSet @entity(immutable: true) {
  id: Bytes!
  seller: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAMMChickenBondsOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAMMChickenBondsParamsSet @entity(immutable: true) {
  id: Bytes!
  A: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PendingGemSellerSet @entity(immutable: true) {
  id: Bytes!
  pendingSeller: Bytes! # address
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAMMChickenBondsRebalanceSwap @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  ethAmount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAMMChickenBondsUserDeposit @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAMMChickenBondsUserWithdraw @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  lusdAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
